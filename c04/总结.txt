第4章 判断与循环
4.1、严格等于
操作符：===
该操作符不仅比较两个值，还比较两个值得类型，如两者都相同，才说明是相等的；
相反的有严格不等于：!==
4.2、短路条件
逻辑与：&&，当第一个条件是false时，不会再计算第二个条件；
逻辑或：||，当第一个条件是true时，不会再计算第二个条件；
4.3、switch语句
同if语句相比，在情况复杂时，有一定的优势，但是有些情况并不适合用switch语句，而应使用if语句。
4.4、强制类型转换和弱类型
如果使用的数据类型和JavaScript所需的数据类型不同，那么它会尽量使这个操作变得有意义，而不是直接报错。
比如if('1' > 0)，会把'1'转成数字1，这种操作叫做：强制类型转换。
JavaScript是弱类型语言，因为值的数据类型是可以变的。
注意：
null是空值；
undefined是未声明的变量或是没有赋值的变量；
NaN这个值被当做数字，是在期望是数字而返回值不是正常数字的时候使用，比如'ten'/2结果就是。
4.5、真值和假值
因为存在强制类型转换，JavaScript中每个值都可以被当做true或者false处理。
假值：
var a = false;
var a = 0;
var a = '';
var a = 10/'score';
var a;
真值：
var a = true;
var a = 1;
var a = 'carrot'; //有内容的字符串
var a = 10/5;
var a = 'true'; //字符串true
var a = '0'; //字符串0
var a = 'false'; //字符串false
此外，对象和数组通常被认为是真值。
4.6、检测相等和存在
真值和true是不一样的，比如：
if(document.getElementById('header')){}
并不等于：
if(document.getElementById('header') == true){}
此外，如果使用==操作符，则下面被认为是相等的：false、0、''，但是如果是严格等于，则它们不相等。
null和undefined除了自身外，不等于任何值。
NaN被视为假值，但是它不等于任何值，包括它自身，因为两个不可定义的数字是不同的。
4.7、短路值
逻辑操作符并非总是返回true或false，原因在于：
	它们会返回停止运算时的值；
	那个值可能是真值也可能是假值，但不一定是boolean型。
4.8、性能考虑
有个重点要记住：当浏览器遇到一段JavaScript脚本时，它会停下手头的所有工作，直到这段脚本运行结束。



















